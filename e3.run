#!/usr/bin/env bash
PATH=.
DICT=dict
ARRAY=array
VERBOSE=0

mode=""
search_val=""
file_path=""


while getopts "k:v:d" opt; do
    if [[ "$opt" == "k" ]]; then
        if [[ "$mode" == "value" ]]; then
            echo "-k and -v are mutually exclusive!"
            exit 1 
        fi
        mode="key"
        search_val="$OPTARG"
    elif [[ "$opt" == 'v' ]]; then
        if [[ "$mode" == "key" ]]; then
            echo "-k and -v are mutually exclusive!"
            exit 1
        fi
        mode="value"
        search_val="$OPTARG"
    elif [[ "$opt" == 'd' ]]; then VERBOSE=1;
    else echo "Usage: $0 ([-k key_path] | [-v value]) json_file"; exit 1;
    fi
done

shift $((OPTIND-1))
file_path="$1"
if [ -z "$file_path" ]; then
    echo "Usage: $0 ([-k key_path] | [-v value]) json_file"
    exit 65
fi

if [ -z "$mode" ]; then
    mode="key"
    search_val="$1"
    file_path="$2"
fi

if [ ! -e "$file_path" ]; then 
    echo "File $file_path doesn't exist" 
    exit 66
fi

declare -a current_path
declare -a struct_stack
declare -a array_indices_stack

square_br_open=0
curly_br_open=0
double_q_open=0
read_what=data # key, data
inside_struct="n"
key_buffer=""
value_buffer=""
does_key_match=0


check_key_match() {
    concat_path=("${current_path[@]}" "$key_buffer")
    if [[ "$mode" == "key" && "$search_val" == $(IFS='.' && echo "${concat_path[*]}") ]]; then
        does_key_match=1
        echo -n "$(IFS='.' && echo "${concat_path[*]}") = "
    fi
}

struct_state_push () {
    struct_stack+=("$inside_struct")
    if [ "$curly_br_open" -gt 0 -o "$square_br_open" -gt 0 ]; then
        current_path+=("$key_buffer")
    fi

    if [[ "$inside_struct" == "$ARRAY" ]]; then
        array_indices_stack+=("$key_buffer")
    fi

    inside_struct=$1
    if [[ "$inside_struct" == "$DICT" ]]; then
        ((curly_br_open++))
        read_what=key
    else
        ((square_br_open++))
        read_what=data
    fi
}

struct_state_pop() {
    if [[ "$inside_struct" == "$DICT" ]]; then
        ((curly_br_open--))
    else
        ((square_br_open--))
    fi

    if [ "${#struct_stack[@]}" -gt 0 ]; then
        inside_struct="${struct_stack[-1]}"
        unset 'struct_stack[-1]'
    fi


    if [ "${#current_path[@]}" -gt 0 ]; then
        unset 'current_path[-1]'
    fi
}
 
while IFS='' read -r -n 1 char; do
    if [[ "$read_what" == "key" ]]; then # read keys
        if [[ "$char" == '"' && "$double_q_open" -eq 1 ]]; then
            double_q_open=0
        elif [[ "$char" == '"' ]]; then
            double_q_open=1
        elif [[ "$double_q_open" -eq 1 ]]; then
            key_buffer+="$char"
        elif [[ "$char" == ":" ]]; then
            check_key_match
            read_what=data
        fi
    else # read data
        if [[ "$char" == '"' && "$double_q_open" -eq 1 ]]; then
            double_q_open=0
        elif [[ "$char" == '"' ]]; then
            double_q_open=1
        elif [[ "$double_q_open" -eq 1 || "$char" =~ [-0-9.] ]]; then
            value_buffer+="$char"
        elif [[ "$char" == "[" ]]; then
            if [ "$does_key_match" -eq 1 ]; then
                echo "[...]"
                does_key_match=0
            fi
            struct_state_push "$ARRAY"
            key_buffer=0
        elif [[ "$char" == "]" ]]; then
            concat_path=("${current_path[@]}" "$key_buffer")
            if [[ "$mode" == "key" && "$search_val" == $(IFS='.' && echo "${concat_path[*]}") ]]; then
                IFS='.' &&  echo "${concat_path[*]} = $value_buffer ]"
            fi
            struct_state_pop
            if [[ "$inside_struct" == "$DICT" ]]; then
                key_buffer=""
            else
                if [ "${#array_indices_stack[@]}" -gt 0 ]; then 
                    key_buffer="${array_indices_stack[-1]}"
                    unset 'array_indices_stack[-1]'
                else
                    key_buffer=""
                fi
            fi
            value_buffer=""
            
        elif [[ "$char" == "{" ]]; then
            if [ "$does_key_match" -eq 1 ]; then
                echo "{...}"
                does_key_match=0
            fi
            struct_state_push "$DICT"
            key_buffer=""
        elif [[ "$char" == "}" ]]; then
            struct_state_pop
             if [ "$does_key_match" -eq 1 ]; then
                echo "$value_buffer"
                does_key_match=0
            fi
            if [[ "$inside_struct" == "$DICT" ]]; then
                key_buffer=""
                value_buffer=""
            else
                if [ "${#array_indices_stack[@]}" -gt 0 ]; then 
                    key_buffer="${array_indices_stack[-1]}"
                    unset 'array_indices_stack[-1]'
                else
                    key_buffer=""
                fi
            fi
            value_buffer=""
            
        elif [[ "$char" == "," ]]; then
           
            if [[ "$inside_struct" == "$DICT" ]]; then
                if [ "$does_key_match" -eq 1 ]; then
                    echo "$value_buffer"
                    does_key_match=0
                fi
                key_buffer=""
                value_buffer=""
                read_what=key
            else
                concat_path=("${current_path[@]}" "$key_buffer")
                if [[ "$mode" == "key" && "$search_val" == $(IFS='.' && echo "${concat_path[*]}") ]]; then
                    IFS='.' && echo "${concat_path[*]} =  ,"
                fi
                ((key_buffer++))
                read_what=data
            fi
            value_buffer=""
        fi
    fi
    [ "$VERBOSE" -eq 1 ] && printf "Char: %-1s | %-5s | kb: %-10s | vb: %-12s | inside_structure: %-5s | %-s \n" \
    "$char" "$read_what" "$key_buffer" "$value_buffer" "$inside_struct" "${current_path[*]}"
done < "$file_path";

if ! [ "$square_br_open" -eq 0 -a "$curly_br_open" -eq 0 -a "$double_q_open" -eq 0 ]; then
    echo "Invalid JSON! $square_br_open $curly_br_open $double_q_open"
    exit 1
fi
