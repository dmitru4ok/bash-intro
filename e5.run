#!/usr/bin/env bash
PATH=.

if [ -z "$1" ]; then
    echo "Usage: $0 log_file N"
    exit 65
fi

if [ ! -f "$1" ]; then
    echo -e "\e[0;31mFile $1 doesn't exist.\e[0m"
    exit 66
fi

if [ ! -r "$1" ]; then
    echo -e "\e[0;31mPermission error when reading $1.\e[0m"
    exit 1
fi

N="$2"
if [[ ! "$N" =~ ^[1-9][0-9]*$ ]]; then
    echo -e "\e[0;31mNo argument N provided.$1.\e[0m"
    echo "Usage: $0 log_file N"
    exit 66
fi


declare -a parsed_res
parse_logfile_string() {
    local string="$1"
    local inside_quotes=0
    local parsed_ind=0
    local iter_ind=0
    local col=""
    IFS=" " read -a temp <<< "$string"
    local temp_len="${#temp[@]}"

    while [ "$iter_ind" -lt "$temp_len" ]; do
        col="${temp["$iter_ind"]}"
        
        if [[ "$col" =~ \"$ && "$col" =~ ^\" ]] || [[ "$col" =~ ^\[ && "$col" =~ \]$ ]]; then
            col="${col#\"\[}"
            parsed_res["$parsed_ind"]="${col%\"\]}"
            ((++parsed_ind))
        elif [[ "$col" =~ ^\" || "$col" =~ ^\[ ]]; then
            parsed_res["$parsed_ind"]="${col#\"} "
            inside_quotes=1
        elif [[ "$col" =~ \"$ || "$col" =~ \]$ ]]; then
            parsed_res["$parsed_ind"]+="${col%\"\[}"
            inside_quotes=0
            ((++parsed_ind))
       
        elif [ "$inside_quotes" -eq 1 ]; then
            parsed_res["$parsed_ind"]+="$col "
        else
            parsed_res["$parsed_ind"]="$col"
            ((++parsed_ind))
        fi
        ((iter_ind++))
    done

    echo "${parsed_res[@]}"
}

buffer=()
exec 3< "$1"
trap "exec 3<&-; exit" SIGINT
lines_read=0;
while : ; do
    while read -u 3 line; do
        if [ "$lines_read" -lt "$N" ]; then
            declare -a "line_${lines_read}_parsed"
            buffer+=("${line}")
            # echo "--------------------------"
            # echo "Preliminary parsing:"
           
            # echo "${buffer[@]}"
            # echo "--------------------------"
            ((++lines_read))
        else
            for ((line_ind=1; line_ind<${N}; line_ind++)); do
                buffer["$(($line_ind - 1))"]="${buffer["$line_ind"]}"
            done
            buffer["$(($N - 1))"]="$line"
            # echo "--------------------------"
            # echo "Post update: "
            # echo "${buffer[@]}"
            # echo "--------------------------"
        fi
        echo -e "\033c"
        echo "Current buffer:"
        for buff_part in "${buffer[@]}"; do
            parse_logfile_string "$buff_part"
        done
       

       
        parsed_res=()
    done
done
