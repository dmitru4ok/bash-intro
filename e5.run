#!/usr/bin/env bash
PATH=.

if [ -z "$1" ]; then
    echo "Usage: $0 log_file N"
    exit 65
fi

if [ ! -f "$1" ]; then
    echo -e "\e[0;31mFile $1 doesn't exist.\e[0m"
    exit 66
fi

if [ ! -r "$1" ]; then
    echo -e "\e[0;31mPermission error when reading $1.\e[0m"
    exit 1
fi

N="$2"
if [[ ! "$N" =~ ^[1-9][0-9]*$ ]]; then
    echo -e "\e[0;31mNo argument N provided.$1.\e[0m"
    echo "Usage: $0 log_file N"
    exit 66
fi


declare -a parsed_res
declare -A result_arr
parse_logfile_string() {
    local string="$1"
    local inside_quotes=0
    local parsed_ind=0
    local iter_ind=0
    local col=""
    IFS=" " read -a temp <<< "$string"
    local temp_len="${#temp[@]}"

    while [ "$iter_ind" -lt "$temp_len" ]; do
        col="${temp["$iter_ind"]}"
        
        if [[ "$col" =~ \"$ && "$col" =~ ^\" ]]; then
            col="${col#\"}"
            parsed_res["$parsed_ind"]="${col%\"}"
            ((++parsed_ind))
        elif [[ "$col" =~ ^\[ && "$col" =~ \]$ ]]; then
            col="${col#\[}"
            parsed_res["$parsed_ind"]="${col%\]}"
            ((++parsed_ind))
        elif [[ "$col" =~ ^\" ]]; then
            parsed_res["$parsed_ind"]="${col#\"} "
            inside_quotes=1
        elif [[ "$col" =~ ^\[ ]]; then 
            parsed_res["$parsed_ind"]="${col#\[} "
            inside_quotes=1
        elif [[ "$col" =~ \"$ ]]; then
            parsed_res["$parsed_ind"]+="${col%\"}"
            inside_quotes=0
            ((++parsed_ind))
        elif [[ "$col" =~ \]$ ]]; then
            parsed_res["$parsed_ind"]+="${col%\]}"
            inside_quotes=0
            ((++parsed_ind))
        elif [ "$inside_quotes" -eq 1 ]; then
            parsed_res["$parsed_ind"]+="$col "
        else
            parsed_res["$parsed_ind"]="$col"
            ((++parsed_ind))
        fi
        ((iter_ind++))
    done

    for string in "${parsed_res[@]}"; do
        ((result_arr["$2,$string"]++))
    done
}

exec 3< "$1"
trap "echo; exec 3<&-; exit" SIGINT
lines_read=0;

while : ; do
    while read -u 3 line; do
        echo -e "\033c"
        echo "Current buffer:"
        if [ "$lines_read" -lt "$N" ]; then
            parse_logfile_string "$line" "$lines_read"
            ((++lines_read))
            for ((i=0; i <${lines_read}; ++i)); do
                for key in "${!result_arr[@]}"; do
                    if [[ "${key#,*}" =~ ^[$i,] ]]; then
                        echo "keymatch: $key $i ${result_arr[$key]}"
                    fi
                done
            done
        else
            for key in "${!result_arr[@]}"; do
                if [[ "${key#,*}" =~ ^0, ]] || [[ "${key#,*}" =~ ^$(($N-1)), ]]; then
                        unset result_arr["$key"]
                fi

                for ((line_ind=1; line_ind<${N}; line_ind++)); do
                    if [[ "${key#,*}" =~ ^${line_ind}, ]]; then
                        post_key="${key#*,}"
                        result_arr["$(($line_ind - 1)),$post_key"]="${result_arr["$key"]}"
                        unset result_arr["$key"]
                    fi
                done
            done
            parse_logfile_string "$line" "$(($N-1))"
            for ((i=0; i <${N}; ++i)); do
                for key in "${!result_arr[@]}"; do
                    if [[ "${key#,*}" =~ ^${i}, ]]; then
                        echo "keymatch: $key ${result_arr[$key]}"
                    fi
                done
            done
            for smth in "${!result_arr[@]}"; do
                echo "$smth"
            done
        fi
       
        parsed_res=()
    done
done
