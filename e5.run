#!/usr/bin/env bash
PATH=.

if [ -z "$1" ]; then
    echo "Usage: $0 log_file N"
    exit 65
fi

if [ ! -f "$1" ]; then
    echo -e "\e[0;31mFile $1 doesn't exist.\e[0m"
    exit 66
fi

if [ ! -r "$1" ]; then
    echo -e "\e[0;31mPermission error when reading $1.\e[0m"
    exit 1
fi

N="$2"
if [[ ! "$N" =~ ^[1-9][0-9]*$ ]]; then
    echo -e "\e[0;31mNo argument N provided.$1.\e[0m"
    echo "Usage: $0 log_file N"
    exit 66
fi



declare -a parsed_res
declare -A result_arr
parse_logfile_string() {
    local string="$1"
    local inside_quotes=0
    local parsed_ind=0
    local iter_ind=0
    local col=""
    IFS=" " read -a temp <<< "$string"
    local temp_len="${#temp[@]}"

    while [ "$iter_ind" -lt "$temp_len" ]; do
        col="${temp["$iter_ind"]}"
        
        if [[ "$col" =~ \"$ && "$col" =~ ^\" ]]; then
            col="${col#\"}"
            parsed_res["$parsed_ind"]="${col%\"}"
            ((++parsed_ind))
        elif [[ "$col" =~ ^\[ && "$col" =~ \]$ ]]; then
            col="${col#\[}"
            parsed_res["$parsed_ind"]="${col%\]}"
            ((++parsed_ind))
        elif [[ "$col" =~ ^\" ]]; then
            parsed_res["$parsed_ind"]="${col#\"} "
            inside_quotes=1
        elif [[ "$col" =~ ^\[ ]]; then 
            parsed_res["$parsed_ind"]="${col#\[} "
            inside_quotes=1
        elif [[ "$col" =~ \"$ ]]; then
            parsed_res["$parsed_ind"]+="${col%\"}"
            inside_quotes=0
            ((++parsed_ind))
        elif [[ "$col" =~ \]$ ]]; then
            parsed_res["$parsed_ind"]+="${col%\]}"
            inside_quotes=0
            ((++parsed_ind))
        elif [ "$inside_quotes" -eq 1 ]; then
            parsed_res["$parsed_ind"]+="$col "
        else
            parsed_res["$parsed_ind"]="$col"
            ((++parsed_ind))
        fi
        ((iter_ind++))
    done
    echo "${parsed_res[@]}"
    local col=0
    for string in "${parsed_res[@]}"; do
        ((result_arr["$col,$string"]++))
        ((col++))
    done
    parsed_res=()
}

display_stats() {
    max_key=0
    for key in "${!result_arr[@]}"; do
        parsed_k="${key%%,*}"
        max_key=$(($parsed_k > $max_key ? $parsed_k : $max_key ))
    done

    for ((i=0; i<${max_key}; ++i)); do
    echo "Column number: $i"
    echo "----------------------------------"
        for key in "${!result_arr[@]}"; do
            if [[ "${key#,*}" =~ ^${i}, ]]; then
                echo "${key#*,} => ${result_arr[$key]} occurencies"
            fi
        done
        echo
    done 
}

exec 3< "$1"
trap "echo; exec 3<&-; exit" SIGINT
lines_read=0;
declare -a window

while : ; do
    while read -u 3 line; do
        unset result_arr
        declare -A result_arr
        echo -e "\033c"
        if [ "$lines_read" -lt "$N" ]; then
            ((++lines_read))
            echo "Log file len is less than $N. Stats for $lines_read lines: "
            window+=("${line}")
            for ((windowind=0; windowind<${lines_read}; ++windowind)); do
                parse_logfile_string "${window["$windowind"]}" "$windowind" 
            done
            display_stats "$lines_read"
        else
            for ((i=1; i<${N}; ++i)); do
                window["$(($i - 1))"]="${window["$i"]}"
            done
            window["$(($N - 1))"]="${line}"
            for ((windowind=0; windowind<${N}; ++windowind)); do
                parse_logfile_string "${window["$windowind"]}" "$windowind" 
            done
            display_stats "$N"
        fi
    done
done
